// This file is @generated by prost-build.
/// 模糊器信息，一个模糊器即一个客户端
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fuzzer {
    /// 模糊器编号
    #[prost(uint64, tag = "1")]
    pub id: u64,
    /// 模糊器类型
    #[prost(enumeration = "FuzzerType", tag = "2")]
    pub fuzzer_type: i32,
    /// 模糊器已执行数
    #[prost(uint64, tag = "3")]
    pub exec: u64,
    ///
    #[prost(double, tag = "4")]
    pub present_exec: f64,
    /// 模糊器的局部覆盖率位图
    #[prost(uint64, tag = "5")]
    pub bitmap_size: u64,
    /// 真实位图
    #[prost(uint64, tag = "6")]
    pub real_bitmap_size: u64,
    /// 最近报告时间，心跳将更新该字段
    /// 调用前需将时间戳转换为uint64数据
    /// 此处的时间戳对应于C语言中的struct timespec数据结构。
    #[prost(uint64, tag = "7")]
    pub timestamp: u64,
    /// 模糊器所属计算节点
    #[prost(uint64, tag = "8")]
    pub compute_node_id: u64,
    /// 新增开始时间
    #[prost(uint64, tag = "9")]
    pub start_timestamp: u64,
}
/// 计算节点
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ComputeNode {
    /// 计算节点编号
    #[prost(uint64, tag = "1")]
    pub id: u64,
    /// 计算节点IP地址
    #[prost(string, tag = "2")]
    pub ipaddr: ::prost::alloc::string::String,
    /// 计算节点CPU核心数
    #[prost(uint32, tag = "3")]
    pub cores: u32,
    /// 计算节点可用内存数
    #[prost(uint64, tag = "4")]
    pub mem_size: u64,
}
/// 客户端发出的注册请求消息
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RegisterRequest {
    /// 模糊器
    #[prost(message, optional, tag = "1")]
    pub fuzzer: ::core::option::Option<Fuzzer>,
    /// 所属计算节点
    #[prost(message, optional, tag = "2")]
    pub compute_node: ::core::option::Option<ComputeNode>,
}
/// 注册响应消息，成功则返回服务端分配的模糊器编号和服务器编号
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RegisterResponse {
    /// 是否成功
    #[prost(bool, tag = "1")]
    pub success: bool,
    /// 分配的模糊器编号
    #[prost(uint64, tag = "2")]
    pub fuzzer_id: u64,
    /// 分配的计算节点编号，如已分配则为原值
    #[prost(uint64, tag = "3")]
    pub compute_node_id: u64,
}
/// 客户端发出的注销请求消息，服务端根据fuzzer_id检索客户端列表
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UnregisterRequest {
    /// 模糊器编号
    #[prost(uint64, tag = "1")]
    pub fuzzer_id: u64,
}
/// 注销响应消息 - 注销是否成功
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UnregisterResponse {
    /// 是否成功
    #[prost(bool, tag = "1")]
    pub success: bool,
}
/// 状态报告消息
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HeartbeatRequest {
    /// 模糊器编号
    #[prost(uint64, tag = "1")]
    pub fuzzer_id: u64,
    /// 模糊器执行数
    #[prost(uint64, tag = "2")]
    pub exec: u64,
    /// 最近执行时间
    #[prost(double, tag = "3")]
    pub present_exec: f64,
    /// 最近报告时间
    /// 调用前需将时间戳转换为uint64数据，即距Unix纪元的秒数。
    /// 时间戳对应于C语言中的struct timespec数据结构。
    #[prost(uint64, tag = "4")]
    pub timestamp: u64,
}
/// 状态报告响应
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HeartbeatResponse {
    /// 是否成功
    #[prost(bool, tag = "1")]
    pub success: bool,
}
/// 种子数据
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Seed {
    /// 种子编号,这个为0
    #[prost(uint64, tag = "1")]
    pub id: u64,
    /// 种子类型
    #[prost(enumeration = "SeedType", tag = "2")]
    pub seed_type: i32,
    /// 种子长度
    #[prost(uint64, tag = "3")]
    pub length: u64,
    /// 发现该种子的模糊器
    #[prost(uint64, tag = "4")]
    pub fuzzer_id: u64,
    /// 服务端存储路径，这个为空
    #[prost(string, tag = "5")]
    pub file_path: ::prost::alloc::string::String,
    /// 种子数据
    #[prost(bytes = "vec", tag = "6")]
    pub data: ::prost::alloc::vec::Vec<u8>,
    /// 是否存在新覆盖边
    #[prost(uint64, tag = "7")]
    pub has_new_cov: u64,
}
/// 获取种子消息 - 向服务端提供fuzzer_id
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetSeedsRequest {
    /// 模糊器编号
    #[prost(uint64, tag = "1")]
    pub fuzzer_id: u64,
    /// 同步种子id
    #[prost(uint64, tag = "2")]
    pub sync_seed_id: u64,
}
/// 获取种子请求响应消息，成功则得到1..N个种子数据
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetSeedsResponse {
    /// 是否成功
    #[prost(bool, tag = "1")]
    pub success: bool,
    /// 种子数组
    #[prost(message, repeated, tag = "2")]
    pub seeds: ::prost::alloc::vec::Vec<Seed>,
}
/// 向服务端提交1个种子数据
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PutSeedRequest {
    /// 模糊器编号
    #[prost(uint64, tag = "1")]
    pub fuzzer_id: u64,
    /// 单个种子数据
    #[prost(message, optional, tag = "2")]
    pub seed: ::core::option::Option<Seed>,
}
/// 提交种子 - 响应
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PutSeedResponse {
    /// 是否成功
    #[prost(bool, tag = "1")]
    pub success: bool,
}
/// 覆盖率结构
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CoverageData {
    #[prost(uint32, tag = "1")]
    pub index: u32,
    #[prost(uint32, tag = "2")]
    pub count: u32,
}
/// 提交局部覆盖率 - 请求
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PutCoverageRequest {
    /// 模糊器编号
    #[prost(uint64, tag = "1")]
    pub fuzzer_id: u64,
    /// 覆盖率信息（每次更新的bit信息）
    #[prost(message, repeated, tag = "2")]
    pub bitmap: ::prost::alloc::vec::Vec<CoverageData>,
    /// 覆盖率原因: 种子类型
    #[prost(uint32, tag = "3")]
    pub seed_type: u32,
}
/// 提交局部覆盖率 - 响应
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PutCoverageResponse {
    /// 根据提交的覆盖率返回响应结果
    #[prost(uint32, tag = "1")]
    pub flag: u32,
    ///   是否成功
    #[prost(bool, tag = "2")]
    pub success: bool,
}
/// 提交初始覆盖位图 - 请求
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PutInitCoverageRequest {
    /// 模糊器编号
    #[prost(uint64, tag = "1")]
    pub fuzzer_id: u64,
    /// 覆盖率位图
    #[prost(bytes = "vec", tag = "2")]
    pub coverage_data: ::prost::alloc::vec::Vec<u8>,
    /// 位图类型
    #[prost(uint32, tag = "3")]
    pub map_flag: u32,
}
/// 提交初始覆盖位图 - 响应
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PutInitCoverageResponse {
    /// 根据提交的覆盖率返回响应结果
    #[prost(uint32, tag = "1")]
    pub flag: u32,
    ///   是否成功
    #[prost(bool, tag = "2")]
    pub success: bool,
}
/// 获取初始覆盖位图 - 请求
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetInitCoverageRequest {
    /// 模糊器编号
    #[prost(uint64, tag = "1")]
    pub fuzzer_id: u64,
    /// 位图类型
    #[prost(uint32, tag = "2")]
    pub flag: u32,
}
/// 获取初始覆盖位图 - 响应
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetInitCoverageResponse {
    /// 是否成功
    #[prost(bool, tag = "1")]
    pub success: bool,
    /// 全员覆盖率位图
    #[prost(bytes = "vec", tag = "2")]
    pub coverage_data: ::prost::alloc::vec::Vec<u8>,
}
/// 获取全局覆盖率 - 请求
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetCoverageRequest {
    /// 模糊器编号
    #[prost(uint64, tag = "1")]
    pub fuzzer_id: u64,
}
/// 获取全局覆盖率 - 响应
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetCoverageResponse {
    /// 是否成功
    #[prost(bool, tag = "1")]
    pub success: bool,
    /// 全员覆盖率位图
    #[prost(bytes = "vec", tag = "2")]
    pub coverage_data: ::prost::alloc::vec::Vec<u8>,
}
/// ===================== ixFuzz系列配置 ==================================
///
/// 对应的是 GetSeedsRequest
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetSeedsixResponse {
    #[prost(bool, tag = "1")]
    pub success: bool,
    #[prost(message, repeated, tag = "2")]
    pub seeds: ::prost::alloc::vec::Vec<Seed>,
    #[prost(message, optional, tag = "3")]
    pub trace_map: ::core::option::Option<TraceMap>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TraceData {
    #[prost(uint64, repeated, tag = "1")]
    pub trace: ::prost::alloc::vec::Vec<u64>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TraceMap {
    #[prost(map = "string, message", tag = "1")]
    pub trace_data_map: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        TraceData,
    >,
}
/// 对应的是 PutSeedResponse
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PutSeedixRequest {
    #[prost(uint64, tag = "1")]
    pub fuzzer_id: u64,
    #[prost(message, optional, tag = "2")]
    pub seed: ::core::option::Option<Seed>,
    #[prost(message, optional, tag = "3")]
    pub trace_map: ::core::option::Option<TraceMap>,
}
/// 模糊测试工具分类
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum FuzzerType {
    /// 未指定类别
    FuzzerUnknown = 0,
    /// AFL
    FuzzerAfl = 1,
    /// Angora
    FuzzerAngora = 2,
    /// QSYM
    FuzzerQsym = 3,
    /// LIBFUZZER
    FuzzerLibfuzzer = 4,
    /// HONGGFUZZ
    FuzzerHonggfuzz = 5,
    /// AFLFast
    FuzzerAflfast = 6,
    /// FairFuzz
    FuzzerFairfuzz = 7,
    /// Radamsa
    FuzzerRadamsa = 8,
    /// IXFUZZ
    FuzzerIxfuzz = 9,
}
impl FuzzerType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            FuzzerType::FuzzerUnknown => "FUZZER_UNKNOWN",
            FuzzerType::FuzzerAfl => "FUZZER_AFL",
            FuzzerType::FuzzerAngora => "FUZZER_ANGORA",
            FuzzerType::FuzzerQsym => "FUZZER_QSYM",
            FuzzerType::FuzzerLibfuzzer => "FUZZER_LIBFUZZER",
            FuzzerType::FuzzerHonggfuzz => "FUZZER_HONGGFUZZ",
            FuzzerType::FuzzerAflfast => "FUZZER_AFLFAST",
            FuzzerType::FuzzerFairfuzz => "FUZZER_FAIRFUZZ",
            FuzzerType::FuzzerRadamsa => "FUZZER_RADAMSA",
            FuzzerType::FuzzerIxfuzz => "FUZZER_IXFUZZ",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "FUZZER_UNKNOWN" => Some(Self::FuzzerUnknown),
            "FUZZER_AFL" => Some(Self::FuzzerAfl),
            "FUZZER_ANGORA" => Some(Self::FuzzerAngora),
            "FUZZER_QSYM" => Some(Self::FuzzerQsym),
            "FUZZER_LIBFUZZER" => Some(Self::FuzzerLibfuzzer),
            "FUZZER_HONGGFUZZ" => Some(Self::FuzzerHonggfuzz),
            "FUZZER_AFLFAST" => Some(Self::FuzzerAflfast),
            "FUZZER_FAIRFUZZ" => Some(Self::FuzzerFairfuzz),
            "FUZZER_RADAMSA" => Some(Self::FuzzerRadamsa),
            "FUZZER_IXFUZZ" => Some(Self::FuzzerIxfuzz),
            _ => None,
        }
    }
}
/// 种子分类
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum SeedType {
    /// 普通种子
    Normal = 0,
    /// 触发新路径
    New = 1,
    /// 触发崩溃的种子
    Crash = 2,
    /// 触发超时的种子
    Hang = 3,
}
impl SeedType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            SeedType::Normal => "NORMAL",
            SeedType::New => "NEW",
            SeedType::Crash => "CRASH",
            SeedType::Hang => "HANG",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "NORMAL" => Some(Self::Normal),
            "NEW" => Some(Self::New),
            "CRASH" => Some(Self::Crash),
            "HANG" => Some(Self::Hang),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod scheduler_service_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// The greeting service definition.
    #[derive(Debug, Clone)]
    pub struct SchedulerServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl SchedulerServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> SchedulerServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> SchedulerServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            SchedulerServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// ===================== 通用接口 ==================================
        /// 注册请求
        pub async fn register(
            &mut self,
            request: impl tonic::IntoRequest<super::RegisterRequest>,
        ) -> std::result::Result<
            tonic::Response<super::RegisterResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/grpc_scheduler.SchedulerService/Register",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("grpc_scheduler.SchedulerService", "Register"));
            self.inner.unary(req, path, codec).await
        }
        /// 注销请求
        pub async fn unregister(
            &mut self,
            request: impl tonic::IntoRequest<super::UnregisterRequest>,
        ) -> std::result::Result<
            tonic::Response<super::UnregisterResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/grpc_scheduler.SchedulerService/Unregister",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("grpc_scheduler.SchedulerService", "Unregister"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// 状态报告请求
        pub async fn heartbeat(
            &mut self,
            request: impl tonic::IntoRequest<super::HeartbeatRequest>,
        ) -> std::result::Result<
            tonic::Response<super::HeartbeatResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/grpc_scheduler.SchedulerService/Heartbeat",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("grpc_scheduler.SchedulerService", "Heartbeat"));
            self.inner.unary(req, path, codec).await
        }
        /// ===================== AFL系列 ==================================
        /// 向服务端发出拉取种子请求，服务端根据调度算法返回一个或多个种子数据
        pub async fn get_seeds(
            &mut self,
            request: impl tonic::IntoRequest<super::GetSeedsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetSeedsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/grpc_scheduler.SchedulerService/GetSeeds",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("grpc_scheduler.SchedulerService", "GetSeeds"));
            self.inner.unary(req, path, codec).await
        }
        /// 向服务端提交一个种子数据
        pub async fn put_seed(
            &mut self,
            request: impl tonic::IntoRequest<super::PutSeedRequest>,
        ) -> std::result::Result<
            tonic::Response<super::PutSeedResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/grpc_scheduler.SchedulerService/PutSeed",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("grpc_scheduler.SchedulerService", "PutSeed"));
            self.inner.unary(req, path, codec).await
        }
        /// 推送初始覆盖率
        pub async fn put_init_coverage(
            &mut self,
            request: impl tonic::IntoRequest<super::PutInitCoverageRequest>,
        ) -> std::result::Result<
            tonic::Response<super::PutInitCoverageResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/grpc_scheduler.SchedulerService/PutInitCoverage",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("grpc_scheduler.SchedulerService", "PutInitCoverage"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// 拉取初始覆盖率
        pub async fn get_init_coverage(
            &mut self,
            request: impl tonic::IntoRequest<super::GetInitCoverageRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetInitCoverageResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/grpc_scheduler.SchedulerService/GetInitCoverage",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("grpc_scheduler.SchedulerService", "GetInitCoverage"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// 推送局部覆盖率
        pub async fn put_coverage(
            &mut self,
            request: impl tonic::IntoRequest<super::PutCoverageRequest>,
        ) -> std::result::Result<
            tonic::Response<super::PutCoverageResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/grpc_scheduler.SchedulerService/PutCoverage",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("grpc_scheduler.SchedulerService", "PutCoverage"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// 拉取全局覆盖率
        pub async fn get_coverage(
            &mut self,
            request: impl tonic::IntoRequest<super::GetCoverageRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetCoverageResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/grpc_scheduler.SchedulerService/GetCoverage",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("grpc_scheduler.SchedulerService", "GetCoverage"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// ===================== ixFuzz系列 ==================================
        ///
        pub async fn put_seed_ix(
            &mut self,
            request: impl tonic::IntoRequest<super::PutSeedixRequest>,
        ) -> std::result::Result<
            tonic::Response<super::PutSeedResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/grpc_scheduler.SchedulerService/PutSeedIX",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("grpc_scheduler.SchedulerService", "PutSeedIX"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_seeds_ix(
            &mut self,
            request: impl tonic::IntoRequest<super::GetSeedsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetSeedsixResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/grpc_scheduler.SchedulerService/GetSeedsIX",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("grpc_scheduler.SchedulerService", "GetSeedsIX"),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod scheduler_service_server {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with SchedulerServiceServer.
    #[async_trait]
    pub trait SchedulerService: Send + Sync + 'static {
        /// ===================== 通用接口 ==================================
        /// 注册请求
        async fn register(
            &self,
            request: tonic::Request<super::RegisterRequest>,
        ) -> std::result::Result<
            tonic::Response<super::RegisterResponse>,
            tonic::Status,
        >;
        /// 注销请求
        async fn unregister(
            &self,
            request: tonic::Request<super::UnregisterRequest>,
        ) -> std::result::Result<
            tonic::Response<super::UnregisterResponse>,
            tonic::Status,
        >;
        /// 状态报告请求
        async fn heartbeat(
            &self,
            request: tonic::Request<super::HeartbeatRequest>,
        ) -> std::result::Result<
            tonic::Response<super::HeartbeatResponse>,
            tonic::Status,
        >;
        /// ===================== AFL系列 ==================================
        /// 向服务端发出拉取种子请求，服务端根据调度算法返回一个或多个种子数据
        async fn get_seeds(
            &self,
            request: tonic::Request<super::GetSeedsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetSeedsResponse>,
            tonic::Status,
        >;
        /// 向服务端提交一个种子数据
        async fn put_seed(
            &self,
            request: tonic::Request<super::PutSeedRequest>,
        ) -> std::result::Result<tonic::Response<super::PutSeedResponse>, tonic::Status>;
        /// 推送初始覆盖率
        async fn put_init_coverage(
            &self,
            request: tonic::Request<super::PutInitCoverageRequest>,
        ) -> std::result::Result<
            tonic::Response<super::PutInitCoverageResponse>,
            tonic::Status,
        >;
        /// 拉取初始覆盖率
        async fn get_init_coverage(
            &self,
            request: tonic::Request<super::GetInitCoverageRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetInitCoverageResponse>,
            tonic::Status,
        >;
        /// 推送局部覆盖率
        async fn put_coverage(
            &self,
            request: tonic::Request<super::PutCoverageRequest>,
        ) -> std::result::Result<
            tonic::Response<super::PutCoverageResponse>,
            tonic::Status,
        >;
        /// 拉取全局覆盖率
        async fn get_coverage(
            &self,
            request: tonic::Request<super::GetCoverageRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetCoverageResponse>,
            tonic::Status,
        >;
        /// ===================== ixFuzz系列 ==================================
        ///
        async fn put_seed_ix(
            &self,
            request: tonic::Request<super::PutSeedixRequest>,
        ) -> std::result::Result<tonic::Response<super::PutSeedResponse>, tonic::Status>;
        async fn get_seeds_ix(
            &self,
            request: tonic::Request<super::GetSeedsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetSeedsixResponse>,
            tonic::Status,
        >;
    }
    /// The greeting service definition.
    #[derive(Debug)]
    pub struct SchedulerServiceServer<T: SchedulerService> {
        inner: _Inner<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    struct _Inner<T>(Arc<T>);
    impl<T: SchedulerService> SchedulerServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            let inner = _Inner(inner);
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for SchedulerServiceServer<T>
    where
        T: SchedulerService,
        B: Body + Send + 'static,
        B::Error: Into<StdError> + Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            let inner = self.inner.clone();
            match req.uri().path() {
                "/grpc_scheduler.SchedulerService/Register" => {
                    #[allow(non_camel_case_types)]
                    struct RegisterSvc<T: SchedulerService>(pub Arc<T>);
                    impl<
                        T: SchedulerService,
                    > tonic::server::UnaryService<super::RegisterRequest>
                    for RegisterSvc<T> {
                        type Response = super::RegisterResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::RegisterRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SchedulerService>::register(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = RegisterSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/grpc_scheduler.SchedulerService/Unregister" => {
                    #[allow(non_camel_case_types)]
                    struct UnregisterSvc<T: SchedulerService>(pub Arc<T>);
                    impl<
                        T: SchedulerService,
                    > tonic::server::UnaryService<super::UnregisterRequest>
                    for UnregisterSvc<T> {
                        type Response = super::UnregisterResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UnregisterRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SchedulerService>::unregister(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = UnregisterSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/grpc_scheduler.SchedulerService/Heartbeat" => {
                    #[allow(non_camel_case_types)]
                    struct HeartbeatSvc<T: SchedulerService>(pub Arc<T>);
                    impl<
                        T: SchedulerService,
                    > tonic::server::UnaryService<super::HeartbeatRequest>
                    for HeartbeatSvc<T> {
                        type Response = super::HeartbeatResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::HeartbeatRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SchedulerService>::heartbeat(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = HeartbeatSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/grpc_scheduler.SchedulerService/GetSeeds" => {
                    #[allow(non_camel_case_types)]
                    struct GetSeedsSvc<T: SchedulerService>(pub Arc<T>);
                    impl<
                        T: SchedulerService,
                    > tonic::server::UnaryService<super::GetSeedsRequest>
                    for GetSeedsSvc<T> {
                        type Response = super::GetSeedsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetSeedsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SchedulerService>::get_seeds(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = GetSeedsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/grpc_scheduler.SchedulerService/PutSeed" => {
                    #[allow(non_camel_case_types)]
                    struct PutSeedSvc<T: SchedulerService>(pub Arc<T>);
                    impl<
                        T: SchedulerService,
                    > tonic::server::UnaryService<super::PutSeedRequest>
                    for PutSeedSvc<T> {
                        type Response = super::PutSeedResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::PutSeedRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SchedulerService>::put_seed(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = PutSeedSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/grpc_scheduler.SchedulerService/PutInitCoverage" => {
                    #[allow(non_camel_case_types)]
                    struct PutInitCoverageSvc<T: SchedulerService>(pub Arc<T>);
                    impl<
                        T: SchedulerService,
                    > tonic::server::UnaryService<super::PutInitCoverageRequest>
                    for PutInitCoverageSvc<T> {
                        type Response = super::PutInitCoverageResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::PutInitCoverageRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SchedulerService>::put_init_coverage(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = PutInitCoverageSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/grpc_scheduler.SchedulerService/GetInitCoverage" => {
                    #[allow(non_camel_case_types)]
                    struct GetInitCoverageSvc<T: SchedulerService>(pub Arc<T>);
                    impl<
                        T: SchedulerService,
                    > tonic::server::UnaryService<super::GetInitCoverageRequest>
                    for GetInitCoverageSvc<T> {
                        type Response = super::GetInitCoverageResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetInitCoverageRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SchedulerService>::get_init_coverage(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = GetInitCoverageSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/grpc_scheduler.SchedulerService/PutCoverage" => {
                    #[allow(non_camel_case_types)]
                    struct PutCoverageSvc<T: SchedulerService>(pub Arc<T>);
                    impl<
                        T: SchedulerService,
                    > tonic::server::UnaryService<super::PutCoverageRequest>
                    for PutCoverageSvc<T> {
                        type Response = super::PutCoverageResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::PutCoverageRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SchedulerService>::put_coverage(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = PutCoverageSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/grpc_scheduler.SchedulerService/GetCoverage" => {
                    #[allow(non_camel_case_types)]
                    struct GetCoverageSvc<T: SchedulerService>(pub Arc<T>);
                    impl<
                        T: SchedulerService,
                    > tonic::server::UnaryService<super::GetCoverageRequest>
                    for GetCoverageSvc<T> {
                        type Response = super::GetCoverageResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetCoverageRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SchedulerService>::get_coverage(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = GetCoverageSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/grpc_scheduler.SchedulerService/PutSeedIX" => {
                    #[allow(non_camel_case_types)]
                    struct PutSeedIXSvc<T: SchedulerService>(pub Arc<T>);
                    impl<
                        T: SchedulerService,
                    > tonic::server::UnaryService<super::PutSeedixRequest>
                    for PutSeedIXSvc<T> {
                        type Response = super::PutSeedResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::PutSeedixRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SchedulerService>::put_seed_ix(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = PutSeedIXSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/grpc_scheduler.SchedulerService/GetSeedsIX" => {
                    #[allow(non_camel_case_types)]
                    struct GetSeedsIXSvc<T: SchedulerService>(pub Arc<T>);
                    impl<
                        T: SchedulerService,
                    > tonic::server::UnaryService<super::GetSeedsRequest>
                    for GetSeedsIXSvc<T> {
                        type Response = super::GetSeedsixResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetSeedsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as SchedulerService>::get_seeds_ix(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = GetSeedsIXSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        Ok(
                            http::Response::builder()
                                .status(200)
                                .header("grpc-status", "12")
                                .header("content-type", "application/grpc")
                                .body(empty_body())
                                .unwrap(),
                        )
                    })
                }
            }
        }
    }
    impl<T: SchedulerService> Clone for SchedulerServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    impl<T: SchedulerService> Clone for _Inner<T> {
        fn clone(&self) -> Self {
            Self(Arc::clone(&self.0))
        }
    }
    impl<T: std::fmt::Debug> std::fmt::Debug for _Inner<T> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            write!(f, "{:?}", self.0)
        }
    }
    impl<T: SchedulerService> tonic::server::NamedService for SchedulerServiceServer<T> {
        const NAME: &'static str = "grpc_scheduler.SchedulerService";
    }
}
